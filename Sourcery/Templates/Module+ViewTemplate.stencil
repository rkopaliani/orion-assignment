{% for type in types.implementing.AutoGeneratable %}
import Combine
import SwiftUI

import Swinject

extension {{ type.name }} {

    struct View: SwiftUI.View {

        @ObservedObject var viewModel: ViewModel.Interface

        var body: some SwiftUI.View {

            VStack {

            } // VStack

        } // body

    } // View

} // {{ type.name }}

#if DEBUG

struct {{ type.name }}_Preview_Provider: PreviewProvider {

    static var previews: some SwiftUI.View {

        View(viewModel: staticContext.viewModel)
    }

    private typealias View = {{ type.name }}.View
    private typealias ViewModel = {{ type.name }}.ViewModel

    private final class Context: ObservableObject {

        let viewModel: ViewModel.Interface

        init(diPair: Container.SyncPair) {

            self.viewModel = diPair.container.resolve(ViewModel.Interface.self)!
        }

    } // Context

    private static var staticContext: Context = {

        initializeLogging()

        let diPair = Container.default

        ViewModel.Factory.register(with: diPair.container, scheduler: DispatchQueue.main)

        return .init(diPair: diPair)
    }()

} // {{ type.name }}_Preview_Provider

#endif
{% endfor %}